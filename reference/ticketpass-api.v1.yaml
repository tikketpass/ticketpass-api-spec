openapi: 3.0.0
info:
  title: ticketpass-api
  version: '1.0'
  description: ''
servers:
  - url: 'http://not.ready.yet/'
paths:
  /v1/auth/sign-up:
    post:
      summary: 회원가입
      operationId: post-v1-auth-sign-up
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: jwt access token
                  tokenType:
                    type: string
                    description: token type
                  user:
                    $ref: '#/components/schemas/UserInfo'
                required:
                  - accessToken
                  - tokenType
                  - user
              examples:
                gildong:
                  value:
                    accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsInJvbGUiOiJQQVJUSUNJUEFOVCIsImV4cCI6MTYwNjA5NzE0MDU0Nn0.t9E6KvykkkIvlivwlyQjG9E7kTu81GMfI-mKohvj5Ro
                    refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsInJvbGUiOiJQQVJUSUNJUEFOVCIsImV4cCI6MTY4Mzg1NzE1OTc3M30.SWT55JmoheoYhgWSjV3LYMCxbVG22t52ODvQAJKZBD0
                    tokenType: Bearer
                    user:
                      id: 1
                      name: 홍길동
                      'email:': gildong@email.com
        '403':
          description: |-
            Forbidden
            메일 인증이 안된 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
              examples:
                example-1:
                  value:
                    message: email not verifeid yet
        '404':
          description: |-
            Not Found
            메일 인증 요청을 보내지 않은 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
              examples:
                example-1:
                  value:
                    message: email verification request not sent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpForm'
            examples:
              gildong:
                value:
                  email: gildong@email.com
                  password: 9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08
                  name: 홍길동
        description: ''
      tags:
        - auth
      description: |-
        회원가입 api

        반드시 메일 인증을 해야 회원가입이 가능합니다.
    parameters: []
  /v1/auth/sign-in:
    parameters: []
    post:
      summary: 로그인
      operationId: postv1-auth-sign-in
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: jwt access token
                  tokenType:
                    type: string
                    description: token type
                  user:
                    $ref: '#/components/schemas/UserInfo'
                required:
                  - accessToken
                  - tokenType
                  - user
              examples:
                gildong:
                  value:
                    accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsInJvbGUiOiJQQVJUSUNJUEFOVCIsImV4cCI6MTYwNjA5NzE0MDU0Nn0.t9E6KvykkkIvlivwlyQjG9E7kTu81GMfI-mKohvj5Ro
                    refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsInJvbGUiOiJQQVJUSUNJUEFOVCIsImV4cCI6MTY4Mzg1NzE1OTc3M30.SWT55JmoheoYhgWSjV3LYMCxbVG22t52ODvQAJKZBD0
                    tokenType: Bearer
                    user:
                      id: 1
                      name: 홍길동
                      'email:': gildong@email.com
      description: "로그인 api\n\njwt 토큰에(access token) 유저 권한을 저장하여 로그인 할 때 \n\n참가자(PARTICIPANT)와 주최자(HOST) 중 선택을 할 수 있도록 함"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInForm'
            examples:
              gildong:
                value:
                  email: gildong@email.com
                  password: 9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08
                  role: PARTICIPANT
        description: ''
      tags:
        - auth
  /v1/concerts:
    post:
      summary: 새로운 공연 등록
      operationId: post-v1-concerts
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  concert:
                    $ref: '#/components/schemas/ConcertInfo'
                required:
                  - concert
              examples:
                concert1:
                  value:
                    concert:
                      name: concert1
                      beginAt: '2020-08-15 08:00:00'
                      spreadsheetLink: 'https://spreadsheet.link'
                      host:
                        id: 1
                        name: 홍길동
                        email: gildong@email.com
        '401':
          description: |-
            Unauthorized

            Authorization 헤더에 access token이 없거나 잘못된 값을 전달했을 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
              examples:
                invalid jwt token:
                  value:
                    message: Invalid jwt token
        '403':
          description: |-
            Forbidden

            공연 등록은 HOST만 가능함
            PARTICIPANT가 공연을 등록하려고 하는 경우 403에러 발생함
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
              examples:
                no permission:
                  value:
                    message: Participant cannot create concert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewConcertForm'
            examples:
              concert1:
                value:
                  name: 공연1
                  beginAt: '2020-08-15 08:00:00'
        description: ''
      parameters:
        - schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.e...
          in: header
          name: Authorization
          required: true
          description: access token
      tags:
        - concert
      description: |-
        새로운 공연 등록 api

        새로운 공연 등록할 때 사용함
    parameters: []
  '/v1/concerts/{concertId}':
    put:
      summary: 공연 정보 수정
      operationId: put-v1-concerts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  concert:
                    $ref: '#/components/schemas/ConcertInfo'
        '401':
          description: |-
            Unauthorized

            Authorization 헤더에 access token이 없거나 잘못된 값을 전달했을 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
              examples:
                invalid jwt token:
                  value:
                    message: Invalid jwt token
        '403':
          description: |-
            Forbidden

            공연을 주최한 호스트가 아님에도 수정을 시도하는 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
              examples:
                no permission:
                  value:
                    message: user is not hosting concert
      description: |-
        공연 정보 수정 api

        새로운 공연 등록할 때 사용함
      tags:
        - concert
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                topImage:
                  type: string
                  format: binary
                  description: 상단 이미지
                bottomImage:
                  type: string
                  format: binary
                  description: 하단 이미지
                name:
                  type: string
                  description: 공연 이름
                startTime:
                  type: string
                  description: 공연 시작시간
                  format: time
                endTime:
                  type: string
                  description: 공연 끝나는 시간
                  format: time
                startDate:
                  type: string
                  description: 공연 시작 날짜
                  format: date
              required:
                - topImage
                - bottomImage
                - name
                - startTime
                - endTime
                - startDate
        description: multiplart/form-data
    parameters:
      - schema:
          type: integer
        name: concertId
        in: path
        required: true
        description: 공연 PK
  '/v1/concerts/{concertId}/sync-tickets':
    post:
      summary: 공연 티켓 동기화
      operationId: post-v1-concerts-sync
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {}
              examples: {}
        '401':
          description: |-
            Unauthorized

            Authorization 헤더에 access token이 없거나 잘못된 값을 전달했을 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
              examples:
                invalid jwt token:
                  value:
                    message: Invalid jwt token
        '403':
          description: |-
            Forbidden

            공연 주최자만 공연 티켓을 동기화할 수 있음
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
              examples:
                no permission:
                  value:
                    message: User is not concert host
        '404':
          description: |-
            Not Found

            존재하지 않는 공연일 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                concert not found:
                  value:
                    message: Concert not found
      tags:
        - concert
      description: |-
        주최자가 스프레드시트에 입력한 티켓 정보 디비로 동기화하는 api

        주최자가 스프레드시트에 참석자 명단을 작성한 뒤 입력완료를 누를 때 사용함
      parameters:
        - schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.e...
          in: header
          name: Authorization
          required: true
          description: access token
    parameters:
      - schema:
          type: string
        name: concertId
        in: path
        required: true
        description: 공연 PK
  '/v1/users/{userId}/tickets':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
        description: 사용자 PK
    get:
      summary: 티켓 목록 조회
      tags:
        - ticket
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  unexpiredTickets:
                    type: array
                    description: "앞으로 공연 예정인 공연 티켓들\n\n달 기준으로 오름차순으로 정렬하고 \n제일 첫번째 티켓이 다음 공연 티켓\n\nex.\n8월\n9월\n10월\n..."
                    items:
                      $ref: '#/components/schemas/TicketInfo'
                  expiredTickets:
                    type: array
                    description: |-
                      이미 공연한 공연 티켓들

                      달 기준으로 내림차순으로 정렬함

                      ex.
                      7월
                      6월
                      5월
                      ...
                    items:
                      $ref: '#/components/schemas/TicketInfo'
                  nextTicket:
                    type: string
                    description: 가까운 시일에 열릴 콘서트
                required:
                  - unexpiredTickets
                  - expiredTickets
                  - nextTicket
              examples:
                'dueSize=3, overDueSize=3':
                  value:
                    due:
                      - id: 4
                        concert:
                          name: concert1
                          beginAt: '2020-08-15 08:00:00'
                          spreadsheetLink: 'https://spreadsheet.link'
                          host:
                            id: 1
                            name: 홍길동
                            email: gildong@email.com
                        seatClass: R
                        isUsed: false
                      - id: 5
                        concert:
                          name: concert2
                          beginAt: '2020-09-15 08:00:00'
                          spreadsheetLink: 'https://spreadsheet.link'
                          host:
                            id: 1
                            name: 홍길동
                            email: gildong@email.com
                        seatClass: R
                        isUsed: false
                      - id: 6
                        concert:
                          name: concert3
                          beginAt: '2020-10-15 08:00:00'
                          spreadsheetLink: 'https://spreadsheet.link'
                          host:
                            id: 1
                            name: 홍길동
                            email: gildong@email.com
                        seatClass: R
                        isUsed: false
                    overdue:
                      - id: 3
                        concert:
                          name: concert3
                          beginAt: '2020-07-15 08:00:00'
                          spreadsheetLink: 'https://spreadsheet.link'
                          host:
                            id: 1
                            name: 홍길동
                            email: gildong@email.com
                        seatClass: R
                        isUsed: true
                      - id: 2
                        concert:
                          name: concert2
                          beginAt: '2020-06-15 08:00:00'
                          spreadsheetLink: 'https://spreadsheet.link'
                          host:
                            id: 1
                            name: 홍길동
                            email: gildong@email.com
                        seatClass: R
                        isUsed: true
                      - id: 1
                        concert:
                          name: concert1
                          beginAt: '2020-05-15 08:00:00'
                          spreadsheetLink: 'https://spreadsheet.link'
                          host:
                            id: 1
                            name: 홍길동
                            email: gildong@email.com
                        seatClass: R
                        isUsed: true
        '401':
          description: |-
            Unauthorized

            Authorization 헤더에 access token이 없거나 잘못된 값을 전달했을 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
              examples:
                invalid jwt token:
                  value:
                    message: Invalid jwt token
        '403':
          description: |-
            Forbidden

            공연 주최자만 공연 티켓을 동기화할 수 있음
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
              examples:
                no permission:
                  value:
                    message: User is not concert host
      operationId: get-v1-users-userId-tickets
      description: "due와 overdue를 응답으로 줌\n\n0.query parameter\n\n  * expiredSize\n    expiredTickets 개수\n  * unexpiredSize\n    unexpiredTicktes 개수\n    \n1.unexpiredTickets\n\n  앞으로 공연 예정인 공연 티켓들\n\n  달 기준으로 오름차순으로 정렬하고 \n  제일 첫번째 티켓이 다음 공연 티켓\n\n  ex.\n  8월\n  9월\n  10월\n  ...\n  \n2.expiredTickets\n\n  이미 공연한 공연 티켓들\n\n  달 기준으로 내림차순으로 정렬함\n  \n  ex.\n  7월\n  6월\n  5월\n  ...\n  \n3. nextTicket\n   \n  가장 빨리 열릴 공연 티켓"
      parameters:
        - schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.e...
          in: header
          name: Authorization
          required: true
          description: access token
        - schema:
            type: integer
          in: query
          name: expiredSize
          description: 앞으로 공연 예정인 공연 티켓 개수
        - schema:
            type: integer
          in: query
          name: unexpiredSize
          description: 이미 공연한 공연티켓 개수
  '/v1/users/{userId}/use-ticket':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: 티켓 사용
      operationId: post-v1-users-userId-use-ticket
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ticket:
                    $ref: '#/components/schemas/TicketInfo'
              examples:
                example-1:
                  value:
                    ticket:
                      id: 4
                      concert:
                        name: concert1
                        beginAt: '2020-08-15 08:00:00'
                        spreadsheetLink: 'https://spreadsheet.link'
                        host:
                          id: 1
                          name: 홍길동
                          email: gildong@email.com
                      seatClass: R
                      isUsed: true
        '409':
          description: |-
            Conflict
            이미 입장 처리된 티켓을 사용할 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
              examples:
                example-1:
                  value:
                    message: ticket is already used
      description: "QR 코드 암호화된 데이터를 POST body로 전송하면 \n서버에서 디코딩한 후 해당 티켓을 사용처리함"
      tags:
        - ticket
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                qrData:
                  type: string
                  description: "QR 코드 데이터 (암호화 된 것)\n\n아래 값을 AES256으로 암호화함\n사용자 ID + 공백 + 티켓 ID "
              required:
                - qrData
        description: |
          QR 코드에 있는 정보들을 POST 바디로 보냄
  /v1/auth/send-email-code:
    post:
      summary: 메일 인증코드 발송
      operationId: post-v1-auth-send-email-code
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: {}
        '429':
          description: |-
            Too Many Requests
            1분 안에 중복된 요청을 보냈을 경우 입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                example-1:
                  value:
                    message: code has been sent
      description: |-
        메일 인증 코드 발송하는 api

        메일 인증 코드 발송한 다음에 회원가입을 할 수 있습니다.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: 인증코드 보낼 이메일
      tags:
        - auth
    parameters: []
  '/v1/users/{userId}/concerts':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: 내가 호스팅한 공연 목록 조회
      tags:
        - concert
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  concerts:
                    type: array
                    description: 내가 주최하는 공연 목록
                    items:
                      $ref: '#/components/schemas/ConcertInfo'
                required:
                  - concerts
        '401':
          description: |-
            Unauthorized
            access token에 문제가 있을 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
        '403':
          description: |-
            Forbidden
            role이 참가자인 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
              examples:
                example-1:
                  value:
                    message: user role is not HOST
      operationId: get-v1-users-userId-concerts
      description: ''
      parameters:
        - schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.e...
          in: header
          name: Authorization
          required: true
          description: access token
        - schema:
            type: integer
          in: query
          name: limit
          description: limit
        - schema:
            type: integer
          in: query
          name: offset
          description: offset
components:
  schemas:
    User:
      title: User
      type: object
      x-tags:
        - z-entity
      properties:
        id:
          type: integer
          description: PK
        email:
          type: string
          description: 이메일
        password:
          type: string
          description: 비밀번호
    Concert:
      title: Concert
      type: object
      x-tags:
        - z-entity
      properties:
        id:
          type: integer
          description: PK
        name:
          type: string
          description: 이름
        startTime:
          type: string
          format: time
          description: 시작일 및 시간
        endTime:
          type: string
          description: 공연 끝나는 시간
          format: time
        startDate:
          type: string
          description: 공연 시작일
          format: date
        hostId:
          type: integer
          description: 주최자 PK
        spreadsheetLink:
          type: string
          description: 스프레드시트 링크
    Ticket:
      title: Ticket
      type: object
      properties:
        id:
          type: integer
          description: 티켓 PK
        concertId:
          type: integer
          description: 공연 PK
        email:
          description: 참가자 이메일
          type: string
        name:
          type: string
          description: 참가자 이름
        seatClass:
          type: string
          description: 참가자 죄석등급
        isUsed:
          type: boolean
          description: 티켓 사용여부
      x-tags:
        - z-entity
    SignUpForm:
      title: SignUpForm
      type: object
      x-examples: {}
      x-tags:
        - z-form
      properties:
        email:
          type: string
          description: 사용자 이메일
          format: email
        password:
          type: string
          description: |-
            비밀번호

            sha256으로 암호화합니다 (64자리)
          minLength: 64
          maxLength: 64
        code:
          type: string
          description: 메일로 받은 인증코드
      required:
        - email
        - password
        - code
    UserInfo:
      title: UserInfo
      type: object
      properties:
        id:
          type: integer
          description: PK
        name:
          type: string
          description: 이름
        email:
          type: string
          description: 이메일
      x-tags:
        - z-dto
    SignInForm:
      title: SignInForm
      type: object
      x-examples: {}
      x-tags:
        - z-form
      description: ''
      properties:
        email:
          type: string
          format: email
          description: 이메일
        password:
          type: string
          description: |-
            비밀번호

            sha256으로 암호화합니다 (64자리)
          minLength: 64
          maxLength: 64
        role:
          type: string
          description: |-
            유저 권한

            jwt 토큰에 권한을 저장합니다
          enum:
            - HOST
            - PARTICIPANT
      required:
        - email
        - password
        - role
    NewConcertForm:
      title: NewConcertForm
      type: object
      x-tags:
        - z-form
      properties:
        name:
          type: string
          description: 공연 이름
        startTime:
          type: string
          description: 공연 시작시간
          format: date-time
        endTime:
          type: string
          format: time
          description: 공연 끝나는 시간
        startDate:
          type: string
          format: date
          description: 공연 시작 날짜
      required:
        - name
        - startTime
        - endTime
        - startDate
    ConcertInfo:
      title: ConcertInfo
      type: object
      x-tags:
        - z-dto
      properties:
        name:
          type: string
          description: 공연 이름
        startTime:
          type: string
          description: 공연 시작시간
          format: time
        endTime:
          type: string
          format: time
          description: 공연 끝나는 시간
        startDate:
          type: string
          format: date
          description: 공연 시작일
        spreadsheetLink:
          type: string
          description: 스프레드시트 링크
          format: uri
        host:
          $ref: '#/components/schemas/UserInfo'
      required:
        - name
        - startTime
        - endTime
        - startDate
        - spreadsheetLink
        - host
    TicketInfo:
      title: TicketInfo
      type: object
      properties:
        id:
          type: integer
        concert:
          $ref: '#/components/schemas/ConcertInfo'
        seatClass:
          type: string
        isUsed:
          type: boolean
      required:
        - id
        - concert
        - seatClass
        - isUsed
      x-tags:
        - z-dto
  securitySchemes: {}
